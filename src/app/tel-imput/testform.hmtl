<div class="flex mt-8 md:justify-end md:m-8">
  <form class="grid grid-cols-1 gap-6 p-4 w-full sm:w-full md:grid-cols-2 -mt-12" [formGroup]="form"
    (ngSubmit)="submit()">
    <!-- Operational Headquarters Telephone -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="operationalTelephone"
        class="text-sm font-medium text-gray-700 dark:text-gray-400" [ngClass]="'text-white' | isDark:''">
        {{ 'Telefono Sede Operativa' | translate }}
      </label>

      <!-- #phone -->
      <mat-form-field class="block w-full mt-1 mb-2">
        <ngx-mat-input-tel matInput [enablePlaceholder]="true" [preferredCountries]="['it', 'gb']"
          [enablePlaceholder]="true" [ngClass]="'text-black' | isDark:''" [enableSearch]="true"
          name="headquarterPhoneNumber" describedBy="phoneInput" formControlName="headquarterPhoneNumber"
          [ngClass]="'bg-white' | isDark:''"></ngx-mat-input-tel>
      </mat-form-field>

      <div *ngIf="
              control('headquarterPhoneNumber').invalid &&
              (control('headquarterPhoneNumber').dirty || control('headquarterPhoneNumber').touched)
            " class="alert alert-danger">
        <mat-error *ngIf="control('headquarterPhoneNumber')?.errors">{{
          "Numero di telefono invalido" | translate
          }}</mat-error>

      </div>


    </div>

    <!-- VAT Number -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="vatNumber"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">{{ 'Partita IVA' | translate }}</label>

      <mat-form-field class="block w-full mt-1 mb-2">
        <input matInput id="vatNumber" type="text" formControlName="vatCode"
          placeholder="Inserisci la tua partita IVA" />
      </mat-form-field>
    </div>

    <!-- Company Email -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="companyEmail"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">{{ 'E-mail aziendale' | translate }}</label>

      <mat-form-field class="block w-full mt-1 mb-2">
        <input matInput id="companyEmail" type="email" formControlName="companyMail"
          placeholder="Inserisci la tua email aziendale" />
      </mat-form-field>
      <div *ngIf="
          control('companyMail').invalid &&
          (control('companyMail').dirty || control('companyMail').touched)
        " class="alert alert-danger">
        <mat-error *ngIf="control('companyMail').errors?.['invalidEmail']">
          {{control('companyMail').errors?.['invalidEmail'] | translate}}
        </mat-error>
      </div>


      <!--            <button type="button" (click)="sendConfirmationEmail('companyEmail')" class="mt-1 text-xs text-blue-500">Send confirmation email</button>-->
    </div>

    <!-- PEC -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="pecEmail"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">PEC</label>

      <mat-form-field class="block w-full mt-1 mb-2">
        <input matInput id="pecEmail" type="email" formControlName="pec" placeholder="Inserisci la tua PEC" />
      </mat-form-field>
      <div *ngIf="
          control('pec').invalid &&
          (control('pec').dirty || control('pec').touched)
        " class="alert alert-danger">
        <mat-error *ngIf="control('pec').errors?.['invalidEmail']">
          {{control('pec').errors?.['invalidEmail'] | translate}}
        </mat-error>
      </div>



      <!--            <button type="button" (click)="sendConfirmationEmail('pecEmail')" class="mt-1 text-xs text-blue-500">Send confirmation email</button>-->
    </div>

    <!-- Website -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="website"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">{{ 'Sito web' | translate }}</label>

      <mat-form-field class="block w-full mt-1 mb-2">
        <input matInput id="website" type="url" formControlName="webSite"
          placeholder="Inserisci l'URL del tuo sito web professionale" />
      </mat-form-field>
      <div *ngIf="
          control('webSite').invalid &&
          (control('webSite').dirty || control('webSite').touched)
        " class="alert alert-danger">
        <mat-error *ngIf="control('webSite').errors?.['invalidUrl']">
          {{control('webSite').errors?.['invalidUrl'] | translate}}
        </mat-error>
      </div>
      {{control('webSite').errors |json}}

    </div>

    <!-- Register Registration Code -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="registerCode"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">{{ 'Registrati Codice di registrazione' |
        translate}}</label>

      <mat-form-field class="block w-full mt-1 mb-2">
        <input matInput id="registerCode" type="text" formControlName="registeredCode"
          placeholder="Inserisci il codice di registrazione del registro" />

      </mat-form-field>
      <!-- <a href="https://www.fnovi.it" class="mt-1 text-xs text-blue-500" target="_blank">FNOVI - Professional Profile</a> -->

    </div>

    <!-- Specializations and Animals of Interest -->
    <!-- <div> -->
    <div class="flex flex-col mr-4">
      <label [ngClass]="'text-white' | isDark:''" for="website"
        class="text-sm font-medium text-gray-700 dark:text-gray-400">{{ 'Specializzazioni e animali di interesse' |
        translate }}</label>
      <multi-select [initialseletionData]="initialAnimalCategoryData"
        (selectedDataChange)="handleSelectedDataChange($event)"></multi-select>
    </div>
    <!-- </div> -->

    <!-- Submit Button  [ngClass]="{ 'bg-orange-500': form.valid }" [disabled]="form.invalid" -->
    <div class="col-span-1 text-right md:col-span-2">
      <button mat-raised-button color="primary" type="submit"
        class="w-32 px-4 py-2 text-white bg-opacity-75 rounded-l shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        [ngClass]="{ 'bg-orange-500': form.valid }" [disabled]="form.invalid">
        Save
      </button>
    </div>
    {{form.value |json}}
    <br>
    {{form.valid }}
    <br>
    {{form.errors |json }}
  </form>
</div>

<div class="grid grid-cols-1 lg:grid-cols-2 gap-2">
  <button mat-raised-button matStepperPrevious type="button" color="primary">
    <mat-icon matButtonIcon>arrow_back_ios</mat-icon>
    {{ "Indietro" | translate }}
  </button>
</div>

export function emailValidator(emailPattern: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const match = emailPattern.test(control.value) || '';
    return !match ? { invalidEmail: "e-mail non valido"} : null;
  };
}

export function phoneValidator(phonePattern: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const match = phonePattern.test(control.value);
    return !match ? { invalidPhone: "numero di telefono invalido"} : null;
  };
}

export function webSiteValidator(webSitePattern: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const match = webSitePattern.test(control.value);
    return !match ? { invalidUrl: "URL non valido"} : null;
  };




===========================================================================================

form!: FormGroup;
  @Input() profileAdditionalData!: ProfileAdditionalData;
  @Input() animalCategories!: AnimalCategory[];
  @Output() favoriteAnimalsChanged = new EventEmitter<any>();
  public animalBreeds!: AnimalBreed[];
  @Output() profileUpdated = new EventEmitter<void>();
  public initialAnimalCategoryData: any = [];
  animalCategorySelectionData: AnimalCategory[] = [];



  constructor(
    private formBuilder: FormBuilder,
    private _profileService: ProfileService
  ) {}

  ngOnInit() {
    this.form = this.formBuilder.group({
      // operationalAddress: [''],
      headquarterPhoneNumber: ['',],
      vatCode: [''],
      // taxCode: [''],
      companyMail: [
        '',
        [
          Validators.email,
          emailValidator(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
        ],
      ],
      pec: [
        '',
        [
          Validators.email,
          emailValidator(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
        ],
      ],
      webSite: [
        '',
        [
          webSiteValidator(/^(https?:\/\/|http:|www\.)\S*|^$/),
          Validators.pattern(/^(https?:\/\/|http:|www\.)\S*|^$/),
        ],
      ],

      specializationAnimalsCategoryJSON: [[]],
      registeredCode:['']
    });

    this.form.setValidators(this.validateAtLeastOneNotEmptyAndInvalid());

    this.getProfileAdditionalData();

    
  }

  ngOnChanges(changes: SimpleChanges) {
    if (
      changes['profileAdditionalData']
    ) {
      this.getProfileAdditionalData();
    }
  }

  getProfileAdditionalData(): void {
    this._profileService.getProfileAdditionalData().subscribe({
      next: (profileAdditionalData: ProfileAdditionalData[]): void => {
        this.profileAdditionalData =  profileAdditionalData[0]
        this.initialAnimalCategoryData = profileAdditionalData[0]?.specializationAnimalsCategoryJSON;
        this.form.patchValue({
           headquarterPhoneNumber:profileAdditionalData[0]?.headquarter_phone_number,
          vatCode: profileAdditionalData[0]?.vatCode,
          companyMail: profileAdditionalData[0]?.comapanyMail,
          pec: profileAdditionalData[0]?.pec,
          webSite: profileAdditionalData[0]?.webSite,
          registeredCode: profileAdditionalData[0]?.registeredCode,
          specializationAnimalsCategoryJSON:
            profileAdditionalData[0]?.specializationAnimalsCategoryJSON,
        });
      },
    });
  }

  submit(): void {
    const formValue = { ...this.form.value };
 

    const finalFormVlaue = {
      ...this.profileAdditionalData, 
      ...formValue,
      specializationAnimalsCategoryJSON: this.animalCategorySelectionData.map(
        (item) => item.id
      ),
   }
  
    this.profileUpdated.emit();
    this._profileService.createProfileAdditionalData(finalFormVlaue);
  }

  // getAnimalBreeds(values: string[]): void {
  //   if (values && values.length !== 0) {
  //     this._profileService.getAnimalBreeds(JSON.stringify(values)).subscribe({
  //       next: (animalBreeds: AnimalBreed[]): void => {
  //         this.animalBreeds = animalBreeds;
  //       },
  //     });
  //   }
  // }

  control(key: string): FormControl {
    
    return this.form.get(key) as FormControl;
  }

  handleSelectedDataChange(selectedData: AnimalCategory[]): void {
    this.animalCategorySelectionData = selectedData;
    // const newIds: string[] = selectedData.map((item) => `${item.id}`);
    // this.getAnimalBreeds(newIds);
  }


  validateAtLeastOneNotEmptyAndInvalid():ValidatorFn {
    return (abstractControl: AbstractControl):ValidationErrors | null => {
      const formGroup:FormGroup = abstractControl as FormGroup;
      // ATleast one controle should not be empty
      const controlNames = Object.keys(formGroup.controls)
      const atleastOneIsValid = controlNames.some(controlName => {
        const control = formGroup.get(controlName) as FormControl
        return control.value != null && control.value.length != 0 
      })

      return atleastOneIsValid? null : { atLeastOneShouldNotBeEmpty: "all optional fields are empty" }
    }
  }

}











